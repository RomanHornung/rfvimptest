## Not run: 

## Load package:
library("rfvimptest")

## Set seed to obtain reproducible results:
set.seed(1234)

# Load example data:
data(iris)

# NOTE: For illustration purposes a very small number (Mmax=20) of maximum
# permutations is considered. This number would be much too small for actual
# applications. The default number is Max=500.

# By default, SPRT is performed:
(ui <- rfvimptest(data=iris, yname="Species"))

(ui2 <- rfvimptest(data=iris, yname="Species", Mmax=20, condinf=TRUE))



par(mfrow=c(2,2))
for(i in 1:4) {
boxplot(ui$permvimps[[i]], ylim=range(c(ui$permvimps[[i]], ui$varimp[i])))
abline(h=ui$varimp[i])
}
par(mfrow=c(1,1))




par(mfrow=c(2,2))
for(i in 1:4) {
  boxplot(ui2$permvimps[[i]], ylim=range(c(ui2$permvimps[[i]], ui2$varimp[i])))
  abline(h=ui2$varimp[i])
}
par(mfrow=c(1,1))



load("Z:/Past/CompletedProjects/DiversityForests/SNComputerScience/Online_Resource_2/Data/datainfo.Rda")



allfiles <- list.files("Z:/Past/CompletedProjects/DiversityForests/SNComputerScience/Online_Resource_2/Data/Datasets")

uia <- as.numeric(sapply(allfiles, function(x) gsub(".Rda", "", strsplit(x, split="_id")[[1]][2])))
ord <- as.numeric(factor(datainfo$dataid, levels=uia))

datainfo$name <- allfiles[ord]

fix(datainfo)

head(uia[ord])

head(allfiles)

head(datainfo)

dim(datainfo)


load("Z:/Past/CompletedProjects/DiversityForests/SNComputerScience/Online_Resource_2/Data/Datasets/dataset152_datatrieve_id1075.Rda")


load("Z:/hearth.Rda")

hearth2 <- hearth
head(hearth2$Class)

dim(hearth2)


hearth2$Class <- factor(as.numeric(hearth2$Class!=1)+1, levels=1:2)

table(hearth2$Class)

# install.packages("OpenML")
library("OpenML")

dataobj = getOMLDataSet(data.id = 475)
dataset <- dataobj$data

names(dataobj)

dataobj$target.features

dataset$Political_system



# Calculation of p-values using the Monte Carlo p-value based testing procedure:
ui <- rfvimptest(data=hearth2, yname="Class", type="complete", Mmax=100)




ui



# NOTE: For illustration purposes a very small number (Mmax=20) of maximum
# permutations is considered. This number would be much too small for actual
# applications. The default number is Max=500.

# By default, SPRT is performed:
rfvimptest(data=hearth2, yname="Class", Mmax=20)

# Calculation of p-values using the Monte Carlo p-value based testing procedure:
rfvimptest(data=hearth2, yname="Class", type="pval", Mmax=20)

# If the frequency of influential variables is expected to be high SAPT can be used:
rfvimptest(data=hearth2, yname="Class", type="SAPT", Mmax=20)


# Two-sample permutation test procedures:

# NOTE: These should be used only for informal screening for influential variables.
# They are not valid statistical tests.

rfvimptest(data=hearth2, yname="Class", test="twosample", condinf=TRUE, Mmax=1000)

rfvimptest(data=hearth2, yname="Class", test="twosample", type="pval", condinf=TRUE, Mmax=1000)

rfvimptest(data=hearth2, yname="Class", test="twosample", type="SAPT", condinf=TRUE, Mmax=20)


# The tests can also be performed for only a subset of the
# variables:

rfvimptest(data=hearth2, yname="Class", varnames=c("Sepal.Width", "Petal.Length"), Mmax=20)








names(iris)
table(iris$Species)
datatry <- iris[iris$Species %in% c("versicolor",  "virginica"),]
datatry$Species <- droplevels(datatry$Species)

data(hearth2)

source("Z:/Projects/SideProjects/PermVIM/Rpackage/Trials/All_Methods_In_One_Code_NEW.R")

myfor <- party::cforest(Species ~ ., data = datatry, controls = cforest_unbiased(mtry = 3, ntree = 50))
mycall <- quote(party::cforest(Species ~ ., data = datatry, controls = cforest_unbiased(mtry = 3, ntree = 50)))

ui3 <- allinone(myfor, mycall, M=5, varnames = c("Sepal.Width", "Petal.Length"), nperm = 1, condinf=TRUE)

ui3 <- allinone(myfor, mycall, M=5, nperm = 1, condinf=TRUE)








myfor <- party::cforest(Class ~ ., data = hearth2, controls = party::cforest_unbiased(mtry = 3, ntree = 50))
mycall <- quote(party::cforest(Class ~ ., data = hearth2, controls = cforest_unbiased(mtry = 3, ntree = 50)))

ui3 <- allinone(myfor, mycall, M=30, nperm = 1, condinf=TRUE)

ui3


ui3 <- allinone(myfor, mycall, M=5, nperm = 1, condinf=TRUE)



set.seed(1234)
ui3 <- allinone(data=hearth2, yname="Class",  Mmax=20, nperm = 1, condinf=TRUE)







# Load package:
library("rfvimptest")

# Set seed to obtain reproducible results:
set.seed(1234)

# Load example data:
data(hearth2)

# NOTE: For illustration purposes very small numbers of maximum
# permutations are considered in the below examples.
# This number would be much too small for actual applications.
# The default number is Max=500.

# When using condinf=FALSE (default) the results for the two-sample
# permutation tests are not obtained:
set.seed(1234)
(ptest <- allinone(data=hearth2, yname="Class",  Mmax=30))

# Variable importance values with p-values from the Monte Carlo p-value
# and the complete approache:
ptest$varimp
ptest$pvalues$pval
ptest$pvalues$complete


# When setting condinf=TRUE the results are obtained for all approaches
# are obtained, that is, including those for the two-sample permutation tests
# (in this illustration very small number of trees ntree=30 are used,
# in practice much larger numbers should be used; the default is ntree=500):
(ptestci <- allinone(data=hearth2, yname="Class", condinf=TRUE, ntree=30, Mmax=10))









ui3


ui2 <- allinone(data=datatry, yname="Species", Mmax=50, varnames = c("Sepal.Width", "Petal.Length"), condinf=TRUE)



ui <- allinone(data=datatry, yname="Species", Mmax=500)





ui









# By default, SPRT is performed:
ui <- rfvimptest(data=dataset, yname="Ytarget", Mmax=20)
ui


# By default, SPRT is performed:
ui <- rfvimptest(data=dataset, yname="Ytarget", type="complete", Mmax=100)
ui




# Calculation of p-values using the Monte Carlo p-value based testing procedure:
ui1 <- rfvimptest(data=dataset, yname="Ytarget", varnames="Region", type="complete", Mmax=500, condinf=FALSE)
ui1



names(dataset)

summary(glm(dataset$Ytarget ~ dataset$V1, family="binomial"))
summary(glm(dataset$Ytarget ~ dataset$V2, family="binomial"))
summary(glm(dataset$Ytarget ~ dataset$V3, family="binomial"))
summary(glm(dataset$Ytarget ~ dataset$V4, family="binomial"))
summary(glm(dataset$Ytarget ~ dataset$V5, family="binomial"))
summary(glm(dataset$Ytarget ~ dataset$V6, family="binomial"))
summary(glm(dataset$Ytarget ~ dataset$V7, family="binomial"))
summary(glm(dataset$Ytarget ~ dataset$V8, family="binomial"))
summary(glm(dataset$Ytarget ~ dataset$V9, family="binomial"))
summary(glm(dataset$Ytarget ~ dataset$V10, family="binomial"))
summary(glm(dataset$Ytarget ~ dataset$V11, family="binomial"))
summary(glm(dataset$Ytarget ~ dataset$V12, family="binomial"))



ui


dataset166_planning-relax_id1490.Rda


head(datainfo)

datainfo2 <- datainfo[order(datainfo$n),]
fix(datainfo2)

par(mfrow=c(2,2))
for(i in 1:4) {
  boxplot(ui2$permvimps[[i]])
  abline(h=ui2$varimp[i])
}
par(mfrow=c(1,1))



ui$permvimps[[1]]


# Calculation of p-values using the Monte Carlo p-value based testing procedure:
rfvimptest(data=iris, yname="Species", type="pval", Mmax=20)

# If the frequency of influential variables is expected to be high SAPT can be used:
rfvimptest(data=iris, yname="Species", type="SAPT", Mmax=20)


# Two-sample permutation test procedures:

# NOTE: These should be used only for informal screening for influential variables.
# They are not valid statistical tests.

rfvimptest(data=iris, yname="Species", test="twosample", condinf=TRUE, Mmax=20)

rfvimptest(data=iris, yname="Species", test="twosample", type="pval", condinf=TRUE, Mmax=20)

rfvimptest(data=iris, yname="Species", test="twosample", type="SAPT", condinf=TRUE, Mmax=20)


# The tests can also be performed for only a subset of the
# variables:

rfvimptest(data=iris, yname="Species", varnames=c("Sepal.Width", "Petal.Length"), Mmax=20)


## End(Not run)
