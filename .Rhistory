plot(1, type = "n", axes = FALSE, xlab = "", ylab = "")
legend("top", legend = c("True", "Unweighted", "Weighted"),
col = c("black", "green", "red"), horiz = TRUE, lwd = c(1, 2, 2), lty = 1:3)
dev.off()
}
}
getwd()
time1 = date()
library(MASS)
library(foreach)
library(pracma)
######## define functions ###############
u <- c <- tt <- phi_s <- phi <- alpha <- c()
## Bern approximation of baseline cumulative hazard function Lambda_{0n}
LambNull <- function(t) {
u <- ifelse(max(LR[,2])==rs,tau,max(LR[,2]))
c <- min(LR[,1])
tt <- ifelse(t>tau,tau,t)
phi_s <- cumsum(exp(phi))
B <- c()
for (i in 1:(m+1)) B <- cbind(B, matrix(choose(m,(i-1))*((tt-c)/(u-c))^(i-1)*(1-(tt-c)/(u-c))^(m-i+1),ncol=1))
return (B%*%matrix(phi_s,ncol=1))
}
####  -log likelihood function of alpha
ln_alpha_phi <- function(alpha,phi,BBase) {
LambNull <- function(t) {
u <- ifelse(max(LR[,2])==rs,tau,max(LR[,2]))
c <- min(LR[,1])
tt <- ifelse(t>tau,tau,t)
phi_s <- cumsum(exp(phi))
B <- c()
for (i in 1:(m+1)) B <- cbind(B, matrix(choose(m,(i-1))*((tt-c)/(u-c))^(i-1)*(1-(tt-c)/(u-c))^(m-i+1),ncol=1))
return (B%*%matrix(phi_s,ncol=1))
}
expL <- ifelse(LR[,2]==0 ,1,exp(-LambNull(LR[,1])*exp(BBase%*%alpha)))
expR <- ifelse(LR[,2]==rs,0,exp(-LambNull(LR[,2])*exp(BBase%*%alpha)))
return( -sum( log(ifelse(expL-expR==0,1e-250,expL-expR)) ) )
}
###   -log likelihood function of phi
ln_phi <- function(phi) {
LambNull <- function(t) {
u <- ifelse(max(LR[,2])==rs,tau,max(LR[,2]))
c <- min(LR[,1])
tt <- ifelse(t>tau,tau,t)
phi_s <- cumsum(exp(phi))
B <- c()
for (i in 1:(m+1)) B <- cbind(B, matrix(choose(m,(i-1))*((tt-c)/(u-c))^(i-1)*(1-(tt-c)/(u-c))^(m-i+1),ncol=1))
return (B%*%matrix(phi_s,ncol=1))
}
expL <- ifelse(LR[,2]==0 ,1,exp(-LambNull(LR[,1])*exp(BBase%*%alpha)))
expR <- ifelse(LR[,2]==rs,0,exp(-LambNull(LR[,2])*exp(BBase%*%alpha)))
return( -sum( log(ifelse(expL-expR==0,1e-250,expL-expR)) ) )
}
###  1st derivative of -loglikelihood function of phi
dln_phi <- function(phi) {
LambL <- LambNull(LR[,1])*exp(BBase%*%alpha)
LambR <- LambNull(LR[,2])*exp(BBase%*%alpha)
SL <- exp(-LambL)
SR <- ifelse(LR[,2]==rs,0,exp(-LambR))
Bern <- function(t) {
B <- c()
tt <- ifelse(t>tau,tau,t)
u <- ifelse(max(LR[,2])==rs,tau,max(LR[,2]))
c <- min(LR[,1])
for (i in 1:(m+1)) B <- cbind(B, matrix(choose(m,(i-1))*((tt-c)/(u-c))^(i-1)*(1-(tt-c)/(u-c))^(m-i+1),ncol=1))
return(B)
}
dln <- numeric(m+1)
for (i in 1:(m+1)) {
dln[i] <- -sum( exp(phi[i]+b_g(x))*(SR*apply(as.matrix(Bern(LR[,2])[,i:(m+1)]),1,sum)-SL*apply(as.matrix(Bern(LR[,1])[,i:(m+1)]),1,sum))/ifelse(abs(SL-SR) < 1e-150,1e-149,SL-SR) )
}
return(dln)
}
#Bern Basis function for psi=B%*%alpha
BernBase <- function(x) {
BB.all <- c()
#####j in 1:ncol(x)
for (j in 1:p){
B.temp <- c()
for (i in 1:(m+1)) B.temp <- cbind(B.temp, matrix(choose(m,(i-1))*((x[,j]-min(x[,j]))/(max(x[,j])-min(x[,j])))^(i-1)*(1-(x[,j]-min(x[,j]))/(max(x[,j])-min(x[,j])))^(m-i+1),ncol=1))
BB.all <- cbind(BB.all, B.temp)
}
return(BB.all)
}
BernBase.uni <- function(x) {
B.temp <- c()
for (i in 1:(m+1)) B.temp <- cbind(B.temp,matrix(choose(m,(i-1))*((x-min(x))/(max(x)-min(x)))^(i-1)*(1-(x-min(x))/(max(x)-min(x)))^(m-i+1),ncol=1))
return(B.temp)
}
# calculate MSE for important covariates only
MSE <- function(x,b.mat) {
cent.f1.est <- scale((BernBase.uni(sort(x[,1]))%*% matrix(b.mat[1,],ncol = 1)), center=TRUE, scale=FALSE)
cent.f2.est <- scale((BernBase.uni(sort(x[,2]))%*% matrix(b.mat[2,],ncol = 1)), center=TRUE, scale=FALSE)
cent.f3.est <- scale((BernBase.uni(sort(x[,3]))%*% matrix(b.mat[3,],ncol = 1)), center=TRUE, scale=FALSE)
cent.f4.est <- scale((BernBase.uni(sort(x[,4]))%*% matrix(b.mat[4,],ncol = 1)), center=TRUE, scale=FALSE)
MSE1 <- trapz(sort(x[,1]),(f1(sort(x[,1]))-cent.f1.est)^2)
MSE2 <- trapz(sort(x[,2]),(f2(sort(x[,2]))-cent.f2.est)^2)
MSE3 <- trapz(sort(x[,3]),(f3(sort(x[,3]))-cent.f3.est)^2)
MSE4 <- trapz(sort(x[,4]),(f4(sort(x[,4]))-cent.f4.est)^2)
MSE <- c(MSE1,MSE2,MSE3,MSE4)
return(MSE)
}
######## simulation setup ############
tau <- 1.25 ### study length #tau = 1.25 right-censor rate around 30%
m <- 3      ### degree of Bern polynomials
rs <- 10    ### right-censored set time
n <- 300   ### sample size
p <- 100    ### dimension of x
s <- 4      ### number (4) of nonzero covariates
eps0 <- 1e-6  ###
eps1 <- 1e-6  ### stop criteria
NN1 <- 30     ### max number of loops
a.ind <- 1:4  ### index of nonzero covariate
lamb.seq <- seq(0.025,0.015,length.out=10)  ### tuning parameter lambda
alpha.lamb.rec <- phi.lamb.rec <- alpha.aic.rec <- alpha.bic.rec <- alpha.ebic.rec <- alpha.ebic.0.5.rec <- alpha.gcv.rec <- phi.aic.rec <- phi.bic.rec <- phi.ebic.rec <- phi.ebic.0.5.rec <- phi.gcv.rec <-c()
lamb.rec <- ms.rec <- lamb.all <- cr <- mse1.glasso <- mse2.glasso <- mse3.glasso <- mse4.glasso <- mse.glasso <- tp.glasso <- fp.glasso <-c()
tp.rec <- tp1 <- tp2 <- tp3 <- tp4 <- tp5 <- all <- c()
##############################################
############# main code#######################
##############################################
for(k in 1:2){#100){
set.seed(k)
VarCovX <- matrix(0,p,p)
for (i in 1:p) for (j in i:p) VarCovX[i,j] <- VarCovX[j,i] <- 0.5^(j-i)
set.seed(k)
xx <- mvrnorm(n,rep(0,p),VarCovX)
scale_x <- function(t) (t-min(t))/(max(t)-min(t))
x <- apply(xx,2,scale_x)
BBase <- BernBase(x)  #n by (m+1)*p
set.seed(k)
T <- c()
f1 <- function(x)  -6*x+3
f2 <-function(x)   -5.4*x+2.7
f3 <-function(x)   4.6*x-2.3
f4 <-function(x)   3.5*x-1.75
k1 = 1.25
eta1 = 2
## generate T
for (i in 1:n){
#T[i] <- rexp(1,exp(f1(x[,1]) + f2(x[,2]) + f3(x[,3]) + f4(x[,4]))[i])
T[i] <- rweibull(1,k1,1/(eta1*exp((f1(x[i,1])+f2(x[i,2])+f3(x[i,3])+f4(x[i,4]))/k1)))
}
CT <- 10
timep <- seq(0,tau,length.out = 10)
LR <- c()
for (i in 1:n){
obsT <- timep*rbinom(CT,1,0.5)
gL <- max(obsT*as.numeric(obsT<T[i]))
Ttemp <- obsT*as.numeric(obsT>T[i])
gR <- min(Ttemp[obsT*as.numeric(obsT>T[i])!=0])
LR <- rbind(LR,c(gL,gR))
}
LR[LR[,2]==Inf,2] <- rs
cr <- c(cr,sum(LR[,2]==rs)/n )  # censor rate
############################
##### Initial value #########
phi.all <- phi <- phi.init<-rep(0,m+1)
alpha.all <- alpha <- alpha.init<-rep(0,(m+1)*p)
###########################################################
## select optimal tuning parameter lambda, AIC/BIC/EBIC/GCV
bic.all <- aic.all <- ebic.all <- ebic.all.0.5 <- gcv.all <- tp.all <- fp.all <- rep(NA,length(lamb.seq))
locator1 <- locator2 <- locator3 <- locator4 <- locator5 <- locator <- tp.seq <- c()
mse1 <- mse2 <- mse3 <- mse4 <- mse <- alpha.lamb <- phi.lamb <- alpha.m <- ss <- ss.lamb <- c()
phi.all <- phi <- phi.init
alpha.all <- alpha <- alpha.init
for (LL in 1:length(lamb.seq)) { ## LL th lambda ##
lamb <- lamb.seq[LL]
phi.all <- phi <- phi.init
alpha.all <- alpha <- alpha.init
########### Estimation procedure start #######
for (NN in 1:NN1) {
##### estimate phi ########
set.seed(k)
phi <- optim(phi,ln_phi,dln_phi,control=c(maxit=100))$par
phi.all<- rbind(phi.all,c(phi))
##### penalized estimation of alpha #########
foreach(d=1:p, .combine='c') %do% {
LambL <- LambNull(LR[,1])*exp(BBase%*%alpha)
LambR <- LambNull(LR[,2])*exp(BBase%*%alpha)
SL <- ifelse(LR[,1]==0 ,1,exp(-LambL))
SR <- ifelse(LR[,2]==rs,0,exp(-LambR))
dg.alpha <- -n^{-1}*t(BBase[,((m+1)*d-m):((m+1)*d)])%*%matrix((SR*LambR-SL*LambL)/ifelse(abs(SL-SR) < 1e-150,1e-149,SL-SR),ncol=1)
hess <- t(BBase[,((m+1)*d-m):((m+1)*d)])%*%
t(t(BBase[,((m+1)*d-m):((m+1)*d)])%*%
diag(c(((SR*LambR-SL*LambL)/ifelse(abs(SL-SR) < 1e-150,1e-149,SL-SR) - SR*SL*(LambL-LambR)^2/(ifelse(abs(SL-SR) < 1e-150,1e-149,SL-SR))^2 ))))
max.eig <- max(eigen(-n^{-1}*hess)$values)
c_d <- alpha[((m+1)*d-m):((m+1)*d)] - dg.alpha/max.eig
pos.part <- 1-lamb/max.eig/sqrt(sum(c_d^2))
alpha[((m+1)*d-m):((m+1)*d)] <- ifelse(pos.part>0, pos.part, 0)*c_d
}
act.set <- which(abs(alpha) > eps0)
alpha[abs(alpha) < eps0] <- 0
alpha.all <- rbind(alpha.all,c(alpha))
if (mean(abs(phi.all[NN,]-phi)) < 1 && (mean(abs(alpha.all[NN,]-alpha)) < eps1)) break
} ########### Estimation procedure end #######
alpha.lamb <- rbind(alpha.lamb,c(alpha))
phi.lamb <- rbind(phi.lamb,c(phi))
alpha.m <- matrix(alpha,byrow = TRUE,ncol=4)
ss <- sum(apply(alpha.m,1,sum)!=0) # model size
ss.lamb <- c(ss.lamb,ss)
aic.all[LL] <- 2*ln_alpha_phi(alpha,phi,BBase)+2*ss
bic.all[LL] <- 2*ln_alpha_phi(alpha,phi,BBase)+ss*log(n)
ebic.all[LL] <- 2*ln_alpha_phi(alpha,phi,BBase)+ss*log(n)+2*log(choose(p,ss))
ebic.all.0.5[LL] <- 2*ln_alpha_phi(alpha,phi,BBase)+ss*log(n)+log(choose(p,ss))
gcv.all[LL] <- ln_alpha_phi(alpha,phi,BBase)/(1-ss/n)^2
tp.all[LL] <- sum(apply(alpha.m,1,sum)[a.ind]!=0)
tp.seq <- rbind(tp.seq,as.numeric(apply(alpha.m,1,sum)[a.ind]!=0))
fp.all[LL] <- sum(apply(alpha.m,1,sum)[-a.ind]!=0)
mse1[LL] <- MSE(x,alpha.m)[1]
mse2[LL] <- MSE(x,alpha.m)[2]
mse3[LL] <- MSE(x,alpha.m)[3]
mse4[LL] <- MSE(x,alpha.m)[4]
phi.init <- phi
alpha.init <- alpha
}
########## save results ###################
alpha.lamb.rec[[k]] <- alpha.lamb
phi.lamb.rec[[k]] <- phi.lamb
all[[k]] <- rbind(lamb.seq,tp.all,fp.all)
#### select optimal lambda by aic/bic/ebic/gcv
locator1 <- which.min(aic.all)
locator2 <- which.min(bic.all)
locator3 <- which.min(ebic.all.0.5)
locator4 <- which.min(ebic.all)
locator5 <- which.min(gcv.all)
locator <- c(locator1,locator2,locator3,locator4,locator5)
alpha.aic.rec <- rbind(alpha.aic.rec,alpha.lamb[locator1,])
alpha.bic.rec <- rbind(alpha.bic.rec,alpha.lamb[locator2,])
alpha.ebic.0.5.rec <- rbind(alpha.ebic.0.5.rec,alpha.lamb[locator3,])
alpha.ebic.rec <- rbind(alpha.ebic.rec,alpha.lamb[locator4,])
alpha.gcv.rec <- rbind(alpha.gcv.rec,alpha.lamb[locator5,])
phi.aic.rec <- rbind(phi.aic.rec,phi.lamb[locator1,])
phi.bic.rec <- rbind(phi.bic.rec,phi.lamb[locator2,])
phi.ebic.0.5.rec <- rbind(phi.ebic.0.5.rec,phi.lamb[locator3,])
phi.ebic.rec <- rbind(phi.ebic.rec,phi.lamb[locator4,])
phi.gcv.rec <- rbind(phi.gcv.rec,phi.lamb[locator5,])
lamb.rec <- rbind(lamb.rec,lamb.seq[locator])
ms.rec <- rbind(ms.rec,ss.lamb[locator])
mse1.glasso <- rbind(mse1.glasso,mse1[locator])
mse2.glasso <- rbind(mse2.glasso,mse2[locator])
mse3.glasso <- rbind(mse3.glasso,mse3[locator])
mse4.glasso <- rbind(mse4.glasso,mse4[locator])
## true positive and true negative
tp.glasso <- rbind(tp.glasso,tp.all[locator])
fp.glasso <- rbind(fp.glasso,fp.all[locator])
tp.rec <- cbind(tp.rec,tp.seq[locator,])
tp1 <- rbind(tp1,tp.seq[locator1,]) #aic
tp2 <- rbind(tp2,tp.seq[locator2,]) #bic
tp3 <- rbind(tp3,tp.seq[locator3,]) #ebic0.5
tp4 <- rbind(tp4,tp.seq[locator4,]) #ebic1
tp5 <- rbind(tp5,tp.seq[locator5,]) #gcv
print(paste("k_glasso====",k))
#print(paste("mse1 ",apply(mse1.glasso,2,median)))
#print(paste("mse2 ",apply(mse2.glasso,2,median)))
#print(paste("mse3 ",apply(mse3.glasso,2,median)))
#print(paste("mse4 ",apply(mse4.glasso,2,median)))
print(paste("mtp ",apply(tp.glasso,2,mean)))
print(paste("mfp ",apply(fp.glasso,2,mean)))
#print(paste("tp.aic",apply(tp1,2,mean)))
#print(paste("tp.bic",apply(tp2,2,mean)))
#print(paste("tp.ebic0.5",apply(tp3,2,mean)))
#print(paste("tp.ebic1",apply(tp4,2,mean)))
#print(paste("tp.gcv",apply(tp5,2,mean)))
flush.console()
}
head(warnings())
#################################
##### save data #################
table.save <- round(cbind(mean(cr),rbind(apply(tp1,2,sum),apply(tp2,2,sum),apply(tp3,2,sum),
apply(tp4,2,sum),apply(tp5,2,sum)),
apply(tp.glasso,2,mean),apply(fp.glasso,2,mean),
apply(ms.rec,2,mean),apply(mse1.glasso,2,median),
apply(mse2.glasso,2,median),apply(mse3.glasso ,2,median),
apply(mse4.glasso,2,median),apply(mse1.glasso,2,sd),
apply(mse2.glasso,2,sd),apply(mse3.glasso,2,sd),
apply(mse4.glasso,2,sd)),3)
colnames(table.save) <- c("cr","tp1","tp2","tp3","tp4","tp","fp","ms","mse1","mmse2","mmse3","mmse4","sd1","sd2","sd3","sd4")
rownames(table.save) <- c("aic","bic","ebic0.5","ebic1","gcv")
dat <- table.save
MMSE <- paste(formatC(round(apply(dat[,9:12],1,mean),3), format='f', digits=3 )," ","(",
formatC(round(apply(dat[,13:16],1,mean),3), format='f', digits=3 ),")",sep="")
TP <- formatC(dat[,6], format='f', digits=2 )
FP <- formatC(dat[,7], format='f', digits=2 )
mse.ebic1 <- median(apply(rbind(mse1.glasso[,4],mse2.glasso[,4],mse3.glasso[,4],mse4.glasso[,4]),1,mean))
data0 <- cbind(dat[,2:5],TP,FP, MMSE)
dim(data0)
fix(data0)
cumsum(9)
cumsum(1:9)
sum(1:9)
10*9/2
rm(list=ls());gc()
# setwd("Z:/Projects/BlockForests/Package/blockForest/")
setwd("Z:/Projects/SideProjects/PermVIM/GitHubCRANpackage/rfvimptest")
library("devtools")
# find_rtools(T)
mydigest <- function (object, algo = c("md5", "sha1", "crc32", "sha256",
"sha512", "xxhash32", "xxhash64", "murmur32"), serialize = TRUE,
file = FALSE, length = Inf, skip = "auto", ascii = FALSE,
raw = FALSE, seed = 0, errormode = c("stop", "warn", "silent"))
{
file.access <- R.utils::fileAccess
algo <- match.arg(algo)
errormode <- match.arg(errormode)
.errorhandler <- function(txt, obj = "", mode = "stop") {
if (mode == "stop") {
stop(txt, obj, call. = FALSE)
}
else if (mode == "warn") {
warning(txt, obj, call. = FALSE)
return(invisible(NA))
}
else {
return(invisible(NULL))
}
}
if (is.infinite(length)) {
length <- -1
}
if (is.character(file) && missing(object)) {
object <- file
file <- TRUE
}
if (serialize && !file) {
object <- if ("nosharing" %in% names(formals(base::serialize)))
base::serialize(object, connection = NULL, ascii = ascii,
nosharing = TRUE)
else base::serialize(object, connection = NULL, ascii = ascii)
if (any(!is.na(pmatch(skip, "auto")))) {
if (ascii) {
skip <- which(object[1:30] == as.raw(10))[4]
}
else {
skip <- 14
}
}
}
else if (!is.character(object) && !inherits(object, "raw")) {
return(.errorhandler(paste("Argument object must be of type character",
"or raw vector if serialize is FALSE"), mode = errormode))
}
if (file && !is.character(object))
return(.errorhandler("file=TRUE can only be used with a character object",
mode = errormode))
algoint <- switch(algo, md5 = 1, sha1 = 2, crc32 = 3, sha256 = 4,
sha512 = 5, xxhash32 = 6, xxhash64 = 7, murmur32 = 8)
if (file) {
algoint <- algoint + 100
object <- path.expand(object)
if (!file.exists(object)) {
return(.errorhandler("The file does not exist: ",
object, mode = errormode))
}
if (!isTRUE(!file.info(object)$isdir)) {
return(.errorhandler("The specified pathname is not a file: ",
object, mode = errormode))
}
if (file.access(object, 4)) {
return(.errorhandler("The specified file is not readable: ",
object, mode = errormode))
}
}
if (is.character(skip))
skip <- 0
val <- .Call(digest_impl, object, as.integer(algoint), as.integer(length),
as.integer(skip), as.integer(raw), as.integer(seed))
return(val)
}
library(digest)
R.utils::reassignInPackage("digest", "digest", mydigest)
roxygen2::roxygenise()
library(rfvimptest)
?rfvimptest
ui <- data.frame(x=1:3, x2=1:3)
ui
any(is.na(ui))
ui$x2[2] <- NA
ui
any(is.na(ui))
apply(data, 2, function(any(is.na(x))))
apply(data, 2, function(any(is.na(x))))
ui <- data.frame(x1=1:3, x2=1:3, x3=4:6, x4=1:3)
ui$x1[3] <- NA
ui
missvariables <- paste(names(ui)[apply(ui, 2, function(x) any(is.na(x)))], collapse = ", ")
missvariables
paste0("Error: Missing data in columns: ", missvariables, ". Please provide complete data or consider setting condinf=TRUE.")
ui$x4[3] <- NA
ui
missvariables <- paste(names(ui)[apply(ui, 2, function(x) any(is.na(x)))], collapse = ", ")
paste0("Error: Missing data in columns: ", missvariables, ". Please provide complete data or consider setting condinf=TRUE.")
library(rfvimptest)
?rfvimptest
data(hearth2)
head(hearth2)
datanew <- hearth2
datanew$sex[3] <- NA
datanew$oldpeak[3] <- NA
(ptest_sprt <- rfvimptest(data=datanew, yname="Class", Mmax=20))
rm(list=ls());gc()
library(rfvimptest)
?rfvimptest
datanew <- hearth2
datanew$sex[3] <- NA
datanew$oldpeak[3] <- NA
(ptest_sprt <- rfvimptest(data=hearth2, yname="Class", Mmax=20))
(ptest_sprt <- rfvimptest(data=datanew, yname="Class", Mmax=20))
?allinone
(ptest <- allinone(data=datanew, yname="Class",  Mmax=20))
sessionInfo()
rm(list=ls());gc()
rm(list=ls());gc()
# setwd("Z:/Projects/BlockForests/Package/blockForest/")
setwd("Z:/Packages/rfvimptestGithubCRAN/rfvimptest")
library("devtools")
# find_rtools(T)
find_rtools(T)
mydigest <- function (object, algo = c("md5", "sha1", "crc32", "sha256",
"sha512", "xxhash32", "xxhash64", "murmur32"), serialize = TRUE,
file = FALSE, length = Inf, skip = "auto", ascii = FALSE,
raw = FALSE, seed = 0, errormode = c("stop", "warn", "silent"))
{
file.access <- R.utils::fileAccess
algo <- match.arg(algo)
errormode <- match.arg(errormode)
.errorhandler <- function(txt, obj = "", mode = "stop") {
if (mode == "stop") {
stop(txt, obj, call. = FALSE)
}
else if (mode == "warn") {
warning(txt, obj, call. = FALSE)
return(invisible(NA))
}
else {
return(invisible(NULL))
}
}
if (is.infinite(length)) {
length <- -1
}
if (is.character(file) && missing(object)) {
object <- file
file <- TRUE
}
if (serialize && !file) {
object <- if ("nosharing" %in% names(formals(base::serialize)))
base::serialize(object, connection = NULL, ascii = ascii,
nosharing = TRUE)
else base::serialize(object, connection = NULL, ascii = ascii)
if (any(!is.na(pmatch(skip, "auto")))) {
if (ascii) {
skip <- which(object[1:30] == as.raw(10))[4]
}
else {
skip <- 14
}
}
}
else if (!is.character(object) && !inherits(object, "raw")) {
return(.errorhandler(paste("Argument object must be of type character",
"or raw vector if serialize is FALSE"), mode = errormode))
}
if (file && !is.character(object))
return(.errorhandler("file=TRUE can only be used with a character object",
mode = errormode))
algoint <- switch(algo, md5 = 1, sha1 = 2, crc32 = 3, sha256 = 4,
sha512 = 5, xxhash32 = 6, xxhash64 = 7, murmur32 = 8)
if (file) {
algoint <- algoint + 100
object <- path.expand(object)
if (!file.exists(object)) {
return(.errorhandler("The file does not exist: ",
object, mode = errormode))
}
if (!isTRUE(!file.info(object)$isdir)) {
return(.errorhandler("The specified pathname is not a file: ",
object, mode = errormode))
}
if (file.access(object, 4)) {
return(.errorhandler("The specified file is not readable: ",
object, mode = errormode))
}
}
if (is.character(skip))
skip <- 0
val <- .Call(digest_impl, object, as.integer(algoint), as.integer(length),
as.integer(skip), as.integer(raw), as.integer(seed))
return(val)
}
library(digest)
R.utils::reassignInPackage("digest", "digest", mydigest)
roxygen2::roxygenise()
library(rfvimptest)
library(golubEsets)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("golubEsets")
library(golubEsets)
data(Golub_Merge)
y <- as.factor(as.numeric(pData(Golub_Merge)[, "ALL.AML"]))
x <- t(exprs(Golub_Merge))
dim(x)
y
getwd()
save(x, y, file="Z:/Projects/DESTATIS/GenError/leukemia.Rda")
nchar("2202485589968")
10000/12
100000/500/12
130*100000/500/12
65*16
31981/12
200*100000/500/12
