#     for (m in 1:M) {
#       if (progressbar) {setTxtProgressBar(pb, m)}
#       if (m == 1 & progressbar) cat(" of variable", v)
#       permdatadefglob[, v] <- sample(permdatadefglob[, v])
#       permdatadefglob <<- permdatadefglob
#
#       starti <- Sys.time()
#       if (!condinf) {
#         permmod <- randomForest::randomForest(as.formula(paste(yname, " ~ .", sep="")), data = permdatadefglob, ntree=ntree, keep.forest=TRUE, keep.inbag = TRUE, importance=TRUE, ...)
#       }
#       else {
#         permmod <- party::cforest(as.formula(paste(yname, " ~ .", sep="")), data = permdatadefglob, controls = cforest_unbiased(ntree=ntree, ...))
#       }
#       stopi <- Sys.time()
#
#       rftimes[count] <- as.numeric(difftime(time1=stopi, time2=starti, units = "secs"))
#
#       starti <- Sys.time()
#       permvimps <- c(permvimps, permimp(permmod, whichxnames = v, nperm = nperm, asParty = TRUE, progressBar = FALSE, do_check=FALSE)$values)
#       stopi <- Sys.time()
#
#       imptimes[count] <- as.numeric(difftime(time1=stopi, time2=starti, units = "secs"))
#       count <- count+1
#
#       d <- sum(permvimps >= vimp_orig$values[v])
#       if (type == "certain") {
#         if (d > stop_crits[[1]][m]) {result <- "accept H0"; break} else if (d <= stop_crits[[2]][m]) {result <- "accept H1"; break}
#       } else if (type %in% c("SPRT", "SAPT")) {
#         if (d >= stop_crits[[1]][m]) {result <- "accept H0"; break} else if (d <= stop_crits[[2]][m]) {result <- "accept H1"; break}
#       } else if (type == "pval") {
#         if (d == h) {result <- paste0("p=", format(d/m, nsmall = 3)); break}
#       }
#     }
#     if (m == M) {
#       if (type == "pval" & d < h) {
#         result <- paste0("p=", format((d + 1) / (M + 1), nsmall = 3))
#       } else {
#         result <- paste0("p=", format(d/m, nsmall = 3))
#       }
#     }
#     if (progressbar) cat(" - finished", "\n")
#     c(result, ifelse(m < M, "yes", "no"), m)
#   })
testresult <- list()
for(ui in seq(along=varnames)) {
v <- varnames[ui]
permdatadefglob <<- datadefglob
permvimps <- c()
for (m in 1:M) {
if (progressbar) {setTxtProgressBar(pb, m)}
if (m == 1 & progressbar) cat(" of variable", v)
permdatadefglob[, v] <- sample(permdatadefglob[, v])
permdatadefglob <<- permdatadefglob
starti <- Sys.time()
if (!condinf) {
permmod <- randomForest::randomForest(as.formula(paste(yname, " ~ .", sep="")), data = permdatadefglob, ntree=ntree, keep.forest=TRUE, keep.inbag = TRUE, importance=TRUE, ...)
}
else {
permmod <- party::cforest(as.formula(paste(yname, " ~ .", sep="")), data = permdatadefglob, controls = cforest_unbiased(ntree=ntree, ...))
}
stopi <- Sys.time()
rftimes[count] <- as.numeric(difftime(time1=stopi, time2=starti, units = "secs"))
starti <- Sys.time()
permvimps <- c(permvimps, permimp(permmod, whichxnames = v, nperm = nperm, asParty = condinf, progressBar = FALSE, do_check=FALSE)$values)
stopi <- Sys.time()
imptimes[count] <- as.numeric(difftime(time1=stopi, time2=starti, units = "secs"))
count <- count+1
d <- sum(permvimps >= vimp_orig$values[v])
if (type == "certain") {
if (d > stop_crits[[1]][m]) {result <- "accept H0"; break} else if (d <= stop_crits[[2]][m]) {result <- "accept H1"; break}
} else if (type %in% c("SPRT", "SAPT")) {
if (d >= stop_crits[[1]][m]) {result <- "accept H0"; break} else if (d <= stop_crits[[2]][m]) {result <- "accept H1"; break}
} else if (type == "pval") {
if (d == h) {result <- paste0("p=", format(d/m, nsmall = 3)); break}
}
}
if (m == M) {
if (type == "pval" & d < h) {
result <- paste0("p=", format((d + 1) / (M + 1), nsmall = 3))
} else {
result <- paste0("p=", format(d/m, nsmall = 3))
}
}
if (progressbar) cat(" - finished", "\n")
testresult[[ui]] <- c(result, ifelse(m < M, "yes", "no"), m)
}
} else if (test == "twosample") {
ntrees <- length(object@ensemble)
testresult <-
lapply(varnames, function(v) {
permdat <- data
permdat[, v] <- sample(permdat[, v])
permmod <- party::cforest(as.formula(paste(yname, " ~ .", sep="")), data = permdat[,varnames], controls = cforest_unbiased(ntree=ntree, ...))
permmodvimps <- permimp(permmod, whichxnames = v, nperm = nperm, asParty = TRUE, progressBar = FALSE)
permvimps <- c()
for (m in 1:M) {
if (progressbar) {setTxtProgressBar(pb, m)}
if (m == 1 & progressbar) cat(" of variable", v)
permvimps <- c(permvimps, mean(c(vimp_orig$perTree[, v], permmodvimps$perTree[, v])[sample(1:(2*ntrees), ntrees)]))
d <- sum(permvimps >= vimp_orig$values[v])
if (type == "certain") {
if (d > stop_crits[[1]][m]) {result <- "accept H0"; break} else if (d <= stop_crits[[2]][m]) {result <- "accept H1"; break}
} else if (type %in% c("SPRT", "SAPT")) {
if (d >= stop_crits[[1]][m]) {result <- "accept H0"; break} else if (d <= stop_crits[[2]][m]) {result <- "accept H1"; break}
} else if (type == "pval") {
if (d == h) {result <- paste0("p=", format(d/m, nsmall = 3)); break}
}
}
if (m == M) {
if (type == "pval" & d < h) {
result <- paste0("p=", format((d + 1) / (M + 1), nsmall = 3))
} else {
result <- paste0("p=", format(d/m, nsmall = 3))
}
}
if (progressbar) cat(" - finished", "\n")
c(result, ifelse(m < M, "yes", "no"), m)
})
}
testresult <- do.call(rbind, testresult)
names(testresult) <- varnames
stoptime <- Sys.time()
time_elapsed <- difftime(stoptime, starttime, units = "secs")
return(list("varimp" = vimp_orig$values, "test result" = testresult[, 1], "stopped early" = testresult[, 2], "permutations performed" = testresult[, 3], "time elapsed" = time_elapsed,
"imptimes" = imptimes, "rftimes" = rftimes))
}
set.seed(1234)
(starti <- Sys.time())
resi <- rfvimptest(data=datatry, yname="Species", M = 20, condinf=FALSE)
(stopi <- Sys.time())
# traceback()
### for RandomForest-objects, by party::cforest()
set.seed(290875)
readingSkills.cf <- party::cforest(score ~ ., data = party::readingSkills,
control = party::cforest_unbiased(mtry = 2, ntree = 25))
# faster implementation but same results
set.seed(290875)
permimp(readingSkills.cf, asParty = TRUE)
dim(party::readingSkills)
### for RandomForest-objects, by party::cforest()
set.seed(290875)
readingSkills.cf <- party::cforest(score ~ ., data = party::readingSkills,
control = party::cforest_unbiased(mtry = 2, ntree = 500))
# faster implementation but same results
set.seed(290875)
permimp(readingSkills.cf, asParty = TRUE)
### for RandomForest-objects, by party::cforest()
set.seed(290875)
readingSkills.cf <- party::cforest(score ~ ., data = party::readingSkills,
control = party::cforest_unbiased(mtry = 2, ntree = 1000))
# faster implementation but same results
set.seed(290875)
permimp(readingSkills.cf, asParty = TRUE)
###
set.seed(290875)
readingSkills.rf <- randomForest::randomForest(score ~ ., data = party::readingSkills,
mtry = 2, ntree = 1000, importance = TRUE,
keep.forest = TRUE, keep.inbag = TRUE)
### (unconditional) Permutation Importance
set.seed(290875)
permimp(readingSkills.rf, do_check = FALSE)
### for RandomForest-objects, by party::cforest()
set.seed(290875)
readingSkills.cf <- party::cforest(score ~ ., data = party::readingSkills,
control = party::cforest_unbiased(mtry = 2, ntree = 1000))
# faster implementation but same results
set.seed(290875)
permimp(readingSkills.cf, asParty = TRUE)
###
set.seed(290875)
readingSkills.rf <- randomForest::randomForest(score ~ ., data = party::readingSkills,
mtry = 2, ntree = 1000, importance = TRUE,
keep.forest = TRUE, keep.inbag = TRUE)
### (unconditional) Permutation Importance
set.seed(290875)
permimp(readingSkills.rf, do_check = FALSE)
###
set.seed(290875)
readingSkills.rf <- randomForest::randomForest(score ~ ., data = party::readingSkills,
mtry = 2, ntree = 1000, importance = TRUE,
keep.forest = TRUE, keep.inbag = TRUE)
### (unconditional) Permutation Importance
set.seed(290875)
permimp(readingSkills.rf, do_check = FALSE, pre1.0_0=TRUE)
permimp
methods("permimp")
getAnywhere("permimp.default")
getAnywhere("permimp.randomForest")
doPermimp
getAnywhere("doPermimp")
library("FSelector")
?information.gain
information.gain
information.gain.body
getAnywhere("information.gain.body")
entropyHelper
getAnywhere("entropyHelper")
entropy
getAnywhere("entropy")
entropy.empirical
getAnywhere("entropy.empirical")
entropy.plugin
getAnywhere("entropy.plugin")
freqs.empirical
getAnywhere("freqs.empirical")
?randomForest
resi
hund <- list()
hund$values <- 1:5
hund
rfvimptest <- function(data, yname, M = 500, varnames = NULL, p0 = 0.06, p1 = 0.04, alpha = 0.05, beta = 0.2, A = 0.1, B = 10, h = 8, nperm = 1,
ntree = 1000,
progressbar = TRUE,
test = c("general", "twosample")[1],
type = c("SPRT", "SAPT", "pval", "certain", "complete")[1], condinf=FALSE, ...) {
starttime <- Sys.time()
if(!condinf & test == "twosample")
stop("'twosample' approach only useable if condinf=TRUE.")
if (progressbar) pb <- txtProgressBar(min = 1, max = M, initial = 1, width = 10, style = 3, char = "|")
if (type == "SPRT") {
A <- beta / (1 - alpha)
B <- (1 - beta) / alpha
}
if (type %in% c("SPRT", "SAPT")) {
logA <- log(A)
logB <- log(B)
help1 <- log((1 - p0) / (1 - p1))
help2 <- log((p1 * (1 - p0)) / (p0 * (1 - p1)))
}
stop_crits <- switch(type,
SPRT = list((logA + 1:M * help1) / help2, (logB + 1:M * help1) / help2),
SAPT = list((logA + 1:M * help1) / help2, (logB + 1:M * help1) / help2),
pval = list(rep(h, times = M), rep(h, times = M)),
certain = list(rep(alpha*M, times = M), M*alpha - M + 1:M),
complete = NULL)
if (is.null(varnames))
varnames <- names(data)[names(data)!=yname]
datadefglob <<- data
yname <<- yname
if (!condinf) {
rfmod <- ranger::ranger(data = datadefglob, dependent.variable.name=yname, num.tree=ntree, importance = "permutation")
vimp_orig <- list()
vimp_orig$values <- rfmod$variable.importance
}
else {
rfmod <- party::cforest(as.formula(paste(yname, " ~ .", sep="")), data = datadefglob, controls = cforest_unbiased(ntree=ntree, ...))
vimp_orig <- permimp(rfmod, whichxnames = varnames, nperm = nperm, asParty = condinf, progressBar = FALSE, do_check=FALSE)
}
if (test == "general") {
testresult <-
lapply(varnames, function(v) {
permdatadefglob <<- datadefglob
permvimps <- c()
for (m in 1:M) {
if (progressbar) {setTxtProgressBar(pb, m)}
if (m == 1 & progressbar) cat(" of variable", v)
permdatadefglob[, v] <- sample(permdatadefglob[, v])
permdatadefglob <<- permdatadefglob
if (!condinf) {
permmod <- ranger::ranger(data = permdatadefglob, dependent.variable.name=yname, num.tree=ntree, importance="permutation")
permvimps <- c(permvimps, permmod$variable.importance[v])
}
else {
permmod <- party::cforest(as.formula(paste(yname, " ~ .", sep="")), data = permdatadefglob, controls = cforest_unbiased(ntree=ntree, ...))
permvimps <- c(permvimps, permimp(permmod, whichxnames = v, nperm = nperm, asParty = TRUE, progressBar = FALSE, do_check=FALSE)$values)
}
d <- sum(permvimps >= vimp_orig$values[v])
if (type == "certain") {
if (d > stop_crits[[1]][m]) {result <- "accept H0"; break} else if (d <= stop_crits[[2]][m]) {result <- "accept H1"; break}
} else if (type %in% c("SPRT", "SAPT")) {
if (d >= stop_crits[[1]][m]) {result <- "accept H0"; break} else if (d <= stop_crits[[2]][m]) {result <- "accept H1"; break}
} else if (type == "pval") {
if (d == h) {result <- paste0("p=", format(d/m, nsmall = 3)); break}
}
}
if (m == M) {
if (type == "pval" & d < h) {
result <- paste0("p=", format((d + 1) / (M + 1), nsmall = 3))
} else {
result <- paste0("p=", format(d/m, nsmall = 3))
}
}
if (progressbar) cat(" - finished", "\n")
c(result, ifelse(m < M, "yes", "no"), m)
})
} else if (test == "twosample") {
ntrees <- length(object@ensemble)
testresult <-
lapply(varnames, function(v) {
permdat <- data
permdat[, v] <- sample(permdat[, v])
permmod <- party::cforest(as.formula(paste(yname, " ~ .", sep="")), data = permdat[,varnames], controls = cforest_unbiased(ntree=ntree, ...))
permmodvimps <- permimp(permmod, whichxnames = v, nperm = nperm, asParty = TRUE, progressBar = FALSE)
permvimps <- c()
for (m in 1:M) {
if (progressbar) {setTxtProgressBar(pb, m)}
if (m == 1 & progressbar) cat(" of variable", v)
permvimps <- c(permvimps, mean(c(vimp_orig$perTree[, v], permmodvimps$perTree[, v])[sample(1:(2*ntrees), ntrees)]))
d <- sum(permvimps >= vimp_orig$values[v])
if (type == "certain") {
if (d > stop_crits[[1]][m]) {result <- "accept H0"; break} else if (d <= stop_crits[[2]][m]) {result <- "accept H1"; break}
} else if (type %in% c("SPRT", "SAPT")) {
if (d >= stop_crits[[1]][m]) {result <- "accept H0"; break} else if (d <= stop_crits[[2]][m]) {result <- "accept H1"; break}
} else if (type == "pval") {
if (d == h) {result <- paste0("p=", format(d/m, nsmall = 3)); break}
}
}
if (m == M) {
if (type == "pval" & d < h) {
result <- paste0("p=", format((d + 1) / (M + 1), nsmall = 3))
} else {
result <- paste0("p=", format(d/m, nsmall = 3))
}
}
if (progressbar) cat(" - finished", "\n")
c(result, ifelse(m < M, "yes", "no"), m)
})
}
testresult <- do.call(rbind, testresult)
names(testresult) <- varnames
stoptime <- Sys.time()
time_elapsed <- difftime(stoptime, starttime, units = "secs")
return(list("varimp" = vimp_orig$values, "test result" = testresult[, 1], "stopped early" = testresult[, 2], "permutations performed" = testresult[, 3], "time elapsed" = time_elapsed,
"imptimes" = imptimes, "rftimes" = rftimes))
}
set.seed(1234)
(starti <- Sys.time())
resi <- rfvimptest(data=datatry, yname="Species", M = 20, condinf=FALSE)
(stopi <- Sys.time())
# traceback()
rfvimptest <- function(data, yname, M = 500, varnames = NULL, p0 = 0.06, p1 = 0.04, alpha = 0.05, beta = 0.2, A = 0.1, B = 10, h = 8, nperm = 1,
ntree = 1000,
progressbar = TRUE,
test = c("general", "twosample")[1],
type = c("SPRT", "SAPT", "pval", "certain", "complete")[1], condinf=FALSE, ...) {
starttime <- Sys.time()
if(!condinf & test == "twosample")
stop("'twosample' approach only useable if condinf=TRUE.")
if (progressbar) pb <- txtProgressBar(min = 1, max = M, initial = 1, width = 10, style = 3, char = "|")
if (type == "SPRT") {
A <- beta / (1 - alpha)
B <- (1 - beta) / alpha
}
if (type %in% c("SPRT", "SAPT")) {
logA <- log(A)
logB <- log(B)
help1 <- log((1 - p0) / (1 - p1))
help2 <- log((p1 * (1 - p0)) / (p0 * (1 - p1)))
}
stop_crits <- switch(type,
SPRT = list((logA + 1:M * help1) / help2, (logB + 1:M * help1) / help2),
SAPT = list((logA + 1:M * help1) / help2, (logB + 1:M * help1) / help2),
pval = list(rep(h, times = M), rep(h, times = M)),
certain = list(rep(alpha*M, times = M), M*alpha - M + 1:M),
complete = NULL)
if (is.null(varnames))
varnames <- names(data)[names(data)!=yname]
datadefglob <<- data
yname <<- yname
if (!condinf) {
rfmod <- ranger::ranger(data = datadefglob, dependent.variable.name=yname, num.tree=ntree, importance = "permutation")
vimp_orig <- list()
vimp_orig$values <- rfmod$variable.importance
}
else {
rfmod <- party::cforest(as.formula(paste(yname, " ~ .", sep="")), data = datadefglob, controls = cforest_unbiased(ntree=ntree, ...))
vimp_orig <- permimp(rfmod, whichxnames = varnames, nperm = nperm, asParty = condinf, progressBar = FALSE, do_check=FALSE)
}
if (test == "general") {
testresult <-
lapply(varnames, function(v) {
permdatadefglob <<- datadefglob
permvimps <- c()
for (m in 1:M) {
if (progressbar) {setTxtProgressBar(pb, m)}
if (m == 1 & progressbar) cat(" of variable", v)
permdatadefglob[, v] <- sample(permdatadefglob[, v])
permdatadefglob <<- permdatadefglob
if (!condinf) {
permmod <- ranger::ranger(data = permdatadefglob, dependent.variable.name=yname, num.tree=ntree, importance="permutation")
permvimps <- c(permvimps, permmod$variable.importance[v])
}
else {
permmod <- party::cforest(as.formula(paste(yname, " ~ .", sep="")), data = permdatadefglob, controls = cforest_unbiased(ntree=ntree, ...))
permvimps <- c(permvimps, permimp(permmod, whichxnames = v, nperm = nperm, asParty = TRUE, progressBar = FALSE, do_check=FALSE)$values)
}
d <- sum(permvimps >= vimp_orig$values[v])
if (type == "certain") {
if (d > stop_crits[[1]][m]) {result <- "accept H0"; break} else if (d <= stop_crits[[2]][m]) {result <- "accept H1"; break}
} else if (type %in% c("SPRT", "SAPT")) {
if (d >= stop_crits[[1]][m]) {result <- "accept H0"; break} else if (d <= stop_crits[[2]][m]) {result <- "accept H1"; break}
} else if (type == "pval") {
if (d == h) {result <- paste0("p=", format(d/m, nsmall = 3)); break}
}
}
if (m == M) {
if (type == "pval" & d < h) {
result <- paste0("p=", format((d + 1) / (M + 1), nsmall = 3))
} else {
result <- paste0("p=", format(d/m, nsmall = 3))
}
}
if (progressbar) cat(" - finished", "\n")
c(result, ifelse(m < M, "yes", "no"), m)
})
} else if (test == "twosample") {
ntrees <- length(object@ensemble)
testresult <-
lapply(varnames, function(v) {
permdat <- data
permdat[, v] <- sample(permdat[, v])
permmod <- party::cforest(as.formula(paste(yname, " ~ .", sep="")), data = permdat[,varnames], controls = cforest_unbiased(ntree=ntree, ...))
permmodvimps <- permimp(permmod, whichxnames = v, nperm = nperm, asParty = TRUE, progressBar = FALSE)
permvimps <- c()
for (m in 1:M) {
if (progressbar) {setTxtProgressBar(pb, m)}
if (m == 1 & progressbar) cat(" of variable", v)
permvimps <- c(permvimps, mean(c(vimp_orig$perTree[, v], permmodvimps$perTree[, v])[sample(1:(2*ntrees), ntrees)]))
d <- sum(permvimps >= vimp_orig$values[v])
if (type == "certain") {
if (d > stop_crits[[1]][m]) {result <- "accept H0"; break} else if (d <= stop_crits[[2]][m]) {result <- "accept H1"; break}
} else if (type %in% c("SPRT", "SAPT")) {
if (d >= stop_crits[[1]][m]) {result <- "accept H0"; break} else if (d <= stop_crits[[2]][m]) {result <- "accept H1"; break}
} else if (type == "pval") {
if (d == h) {result <- paste0("p=", format(d/m, nsmall = 3)); break}
}
}
if (m == M) {
if (type == "pval" & d < h) {
result <- paste0("p=", format((d + 1) / (M + 1), nsmall = 3))
} else {
result <- paste0("p=", format(d/m, nsmall = 3))
}
}
if (progressbar) cat(" - finished", "\n")
c(result, ifelse(m < M, "yes", "no"), m)
})
}
testresult <- do.call(rbind, testresult)
names(testresult) <- varnames
stoptime <- Sys.time()
time_elapsed <- difftime(stoptime, starttime, units = "secs")
return(list("varimp" = vimp_orig$values, "test result" = testresult[, 1], "stopped early" = testresult[, 2], "permutations performed" = testresult[, 3], "time elapsed" = time_elapsed))
}
set.seed(1234)
(starti <- Sys.time())
resi <- rfvimptest(data=datatry, yname="Species", M = 20, condinf=FALSE)
(stopi <- Sys.time())
# traceback()
set.seed(1234)
(starti2 <- Sys.time())
resi2 <- rfvimptest(data=datatry, yname="Species", M = 20, condinf=TRUE)
(stopi2 <- Sys.time())
# traceback()
stopi - starti
stopi2 - starti2
set.seed(1234)
(starti <- Sys.time())
resi <- rfvimptest(data=datatry, yname="Species", M = 20, condinf=FALSE)
(stopi <- Sys.time())
# traceback()
resi
summary(glm(Species ~ Sepal.Length, data=datatry, family="binomial"))
summary(glm(Species ~ Sepal.Width, data=datatry, family="binomial"))
summary(glm(Species ~ Petal.Length, data=datatry, family="binomial"))
summary(glm(Species ~ Petal.Width, data=datatry, family="binomial"))
resi
resi2
set.seed(1234)
(starti <- Sys.time())
resi <- rfvimptest(data=datatry, yname="Species", condinf=FALSE)
(stopi <- Sys.time())
# traceback()
stopi - starti
set.seed(1234)
(starti2 <- Sys.time())
resi2 <- rfvimptest(data=datatry, yname="Species", condinf=TRUE)
(stopi2 <- Sys.time())
# traceback()
resi2
resi
dim(iris)
dim(datatry)
set.seed(1234)
(starti <- Sys.time())
resi <- rfvimptest(data=datatry, yname="Species", type="pval", condinf=FALSE)
(stopi <- Sys.time())
# traceback()
resi
library("ranger")
?ranger
library("diversityForest")
?interactionfor
?plotEffects
?ranger
?lm
library("ranger")
?ranger
library("party")
?cforest
library("diversityForest")
?plotEffects
data(BreastCancer)
data(Glass)
library(ordinalForest)
?hearth
data(hearth)
table(hearth$Class)
table(hearth$Class==1)
save(hearth, file="Z:/hearth.Rda")
?ranger
citation("party")
